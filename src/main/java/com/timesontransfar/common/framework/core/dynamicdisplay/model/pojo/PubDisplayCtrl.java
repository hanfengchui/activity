package com.timesontransfar.common.framework.core.dynamicdisplay.model.pojo;

import java.util.List;

/**
 * PubDisplayCtrl generated by hbm2java 页面上显示的控件类,这个类可以表示web页面上不同类型的控件.
 */
@SuppressWarnings("all")
public class PubDisplayCtrl implements java.io.Serializable, Cloneable {

	// Fields

	private java.lang.String ctrlId;

	private java.lang.Integer posX;

	private java.lang.Integer posY;

	private java.lang.Integer width;

	private java.lang.Integer height;

	private Integer isVirsual;

	private Integer isWrite;

	private String referType;

	private String attributeId;

	private java.lang.String webId;
	
	private boolean outFlag;

	private String ctrlType;

	private Integer isStatic;

	private java.lang.String content;

	private boolean forward;

	private Integer matchCtrlType;

	private String matchValue;

	private List childRelaList;

	private List parentRelaList;

	private String defaultValue;

	private List constrainList;

	private List relaAction;
	
	private String altString;

	// Constructors

	public String getDefaultValue() {
		return defaultValue;
	}

	public void setDefaultValue(String defaultValue) {
		this.defaultValue = defaultValue;
	}

	/** default constructor */
	public PubDisplayCtrl() {
	}

	/** constructor with id */
	public PubDisplayCtrl(java.lang.String ctrlId) {
		this.ctrlId = ctrlId;
	}

	/**
	 * @return 返回 childRelaList。
	 */
	public List getChildRelaList() {
		return childRelaList;
	}

	/**
	 * @param childRelaList
	 *            要设置的 childRelaList。
	 */
	public void setChildRelaList(List childRelaList) {
		this.childRelaList = childRelaList;
	}

	/**
	 * @return 返回 parentRelaList。
	 */
	public List getParentRelaList() {
		return parentRelaList;
	}

	/**
	 * @param parentRelaList
	 *            要设置的 parentRelaList。
	 */
	public void setParentRelaList(List parentRelaList) {
		this.parentRelaList = parentRelaList;
	}

	// Property accessors
	/**
	 * 取得控件id 控件id是控件的唯一表示
	 */
	public java.lang.String getCtrlId() {
		return this.ctrlId;
	}

	/**
	 * 设置控件id 控件id是的唯一表示
	 *
	 * @param CtrlId
	 *            设置控件id
	 */
	public void setCtrlId(java.lang.String ctrlId) {
		this.ctrlId = ctrlId;
	}

	/**
	 * 取得控件的显示行位置
	 *
	 * @return 控件显示的所在行
	 */
	public Integer getPosX() {
		return this.posX;
	}

	/**
	 * 设置控件显示所在的行位置
	 *
	 * @param PosX
	 *            行位置
	 */
	public void setPosX(Integer posX) {
		this.posX = posX;
	}

	/**
	 * 取得控件显示所在的列位置
	 *
	 * @return 列位置
	 */
	public Integer getPosY() {
		return this.posY;
	}

	/**
	 * 设置控件显示所在的列位置
	 *
	 * @param PosY
	 *            列位置
	 */
	public void setPosY(Integer posY) {
		this.posY = posY;
	}

	/**
	 * 取得控件显示的宽度
	 *
	 * @return 显示宽度
	 */
	public java.lang.Integer getWidth() {
		return this.width;
	}

	/**
	 * 设置控件在页面上显示的宽度
	 *
	 * @param Width
	 *            显示宽度
	 */
	public void setWidth(java.lang.Integer width) {
		this.width = width;
	}

	/**
	 * 取得控件在页面上显示的高度
	 *
	 * @return 显示高度
	 */
	public java.lang.Integer getHeight() {
		return this.height;
	}

	/**
	 * 设置控件在页面上显示的高度
	 *
	 * @param Height
	 *            显示的高度
	 */
	public void setHeight(java.lang.Integer height) {
		this.height = height;
	}

	/**
	 * 控件在页面上是否可见 1表示可见 0表示不可见
	 *
	 * @return 如果控件可见返回1 否则返回0
	 */
	public Integer getIsVirsual() {
		return this.isVirsual;
	}

	/**
	 * 设置控件在页面上是否可见 1为可见 0为不可见
	 *
	 * @param IsVirsual
	 *            1为可见 0为不可见
	 */
	public void setIsVirsual(Integer isVirsual) {
		this.isVirsual = isVirsual;
	}

	/**
	 * 控件是否可写
	 *
	 * @return 1为可写 0为不可写
	 */
	public Integer getIsWrite() {
		return this.isWrite;
	}

	/**
	 * 设置控件是否可写
	 *
	 * @param IsWrite
	 *            1为可写 0为不可写
	 */
	public void setIsWrite(Integer isWrite) {
		this.isWrite = isWrite;
	}

	/**
	 * 取得控件的参数类型 即入参或出参 入参是指控件的值改变后需要传回后台保存 出参是指控件的指仅仅用于显示
	 *
	 * @return
	 */
	public String getReferType() {
		return this.referType;
	}

	/**
	 * 设置控件的参数类型 即入参或出参 入参是指控件的值改变后需要传回后台保存 出参是指控件的指仅仅用于显示
	 *
	 * @param "1"为入参
	 *            "0"为出参
	 */
	public void setReferType(String referType) {
		this.referType = referType;
	}

	/**
	 * 控件所要表示的实体的属性 前台页面提交时属性id需要同空间一同提交到后台
	 *
	 * @return 代表的实体的属性
	 */
	public String getAttributeId() {
		return this.attributeId;
	}

	/**
	 * 设置控件代表的实体属性id 前台页面提交时属性id需要同空间一同提交到后台
	 *
	 * @param AttributeId
	 *            属性id
	 */
	public void setAttributeId(String attributeId) {
		this.attributeId = attributeId;
	}

	/**
	 * 控件类型 比如TEXT SELECT TEXTAREA等
	 *
	 * @return 控件类型
	 */
	public String getCtrlType() {
		return this.ctrlType;
	}

	/**
	 * 设置控件类型 如TEXT SELECT TEXTAREA等
	 *
	 * @param CtrlType
	 *            控件类型
	 */
	public void setCtrlType(String ctrlType) {
		this.ctrlType = ctrlType;
	}

	/**
	 * 控件表示的值的静态属性 静态值是指从静态表中取值
	 *
	 * @return 1为静态值 0为非静态值
	 */
	public Integer getIsStatic() {
		return this.isStatic;
	}

	/**
	 * 设置控件值的类型 1为静态值控件的值从静态表中取 0为非静态值 控件的值重实体的属性中取
	 *
	 * @param IsStatic
	 */
	public void setIsStatic(Integer isStatic) {
		this.isStatic = isStatic;
	}

	/**
	 * 控件的内容 即控件值
	 *
	 * @return 控件值
	 */
	public java.lang.String getContent() {
		return this.content;
	}

	/**
	 * 设置控件的值
	 *
	 * @param Content
	 *            控件值
	 */
	public void setContent(java.lang.String content) {
		this.content = content;
	}

	/**
	 * 控件在web上显示的id 如果出现重复的webId则进一步进行区分
	 *
	 * @return
	 */
	public java.lang.String getWebId() {
		return webId;
	}

	/**
	 * 设置控件在web上显示的id
	 *
	 * @param webId
	 */
	public void setWebId(java.lang.String webId) {
		this.webId = webId;
	}

	public boolean isForward() {
		return forward;
	}

	public void setForward(boolean forward) {
		this.forward = forward;
	}

	public Integer getMatchCtrlType() {
		return matchCtrlType;
	}

	public void setMatchCtrlType(Integer matchCtrlType) {
		this.matchCtrlType = matchCtrlType;
	}

	public String getMatchValue() {
		return matchValue;
	}

	public void setMatchValue(String matchValue) {
		this.matchValue = matchValue;
	}

	public List getConstrainList() {
		return constrainList;
	}

	public void setConstrainList(List constrainList) {
		this.constrainList = constrainList;
	}

	public List getRelaAction() {
		return relaAction;
	}

	public void setRelaAction(List relaAction) {
		this.relaAction = relaAction;
	}

	public Object clone() {
		PubDisplayCtrl copy = null;
		try {
			copy = (PubDisplayCtrl)super.clone();
		} catch (CloneNotSupportedException e) {
			e.printStackTrace();
		}
		return copy;
	}

	public boolean getOutFlag() {
		return outFlag;
	}

	public void setOutFlag(boolean outFlag) {
		this.outFlag = outFlag;
	}

	public String getAltString() {
		return altString;
	}

	public void setAltString(String altString) {
		this.altString = altString;
	}
}